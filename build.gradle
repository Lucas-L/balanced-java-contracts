/*
 * Copyright (c) 2022-2022 Balanced.network.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import groovy.swing.SwingBuilder
import network.balanced.score.dependencies.Dependencies


buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath Dependencies.javaeePlugin
    }
}

apply plugin: 'deploy-contracts'

deployBalancedContracts  {
    envs {
        local {
            env = "local"
        }
        berlin {
            env = "berlin"
            configFile = "contracts-sample.json"
            keystore = rootProject.findProperty('keystoreName') ?: ''
            password = rootProject.findProperty('keystorePass') ?: ''
        }
    }
}

executeBalancedActions {
    contractAddressFile = "sample.json"
    propertiesFile = "sample.properties"
    actionsFile = "actions-sample.json"
    keystore = rootProject.findProperty('keystoreName') ?: ''
    password = rootProject.findProperty('keystorePass') ?: ''
}

subprojects {
    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'foundation.icon.javaee'

    sourceSets {
        intTest {
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
            java {
            }
        }

    }

    configurations {
        intTestImplementation.extendsFrom testImplementation
        intTestAnnotationProcessor.extendsFrom testAnnotationProcessor
        intTestRuntimeOnly.extendsFrom testRuntimeOnly
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    // need to add this option to retrieve formal parameter names
    compileJava {
        options.compilerArgs += ['-parameters']
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (rootProject.hasProperty('keystorePass')) {
        return
    }
    def hasDeployTask = taskGraph.getAllTasks().any { it ->
        return it.name == "deployToMainnet"
    }

    if (hasDeployTask) {
        def pass = ''
        if (System.console() == null) {
            new SwingBuilder().edt {
                dialog(modal: true,
                        title: 'Keystore password',
                        alwaysOnTop: true,
                        resizable: false,
                        locationRelativeTo: null,
                        pack: true,
                        show: true
                ) {
                    vbox {
                        hbox {
                            label(text: 'Please enter key passphrase: ')
                        }
                        hbox {
                            input = passwordField(columns: 20, id: 'password')
                        }
                        hbox {
                            button(defaultButton: true, text: 'OK', actionPerformed: {
                                pass = input.password
                                dispose()
                            })
                        }
                    }
                }
            }
        } else {
            pass = System.console().readPassword("\nPlease enter key passphrase: ")
            pass = new String(pass)
        }

        if (pass.size() <= 0) {
            throw new InvalidUserDataException("You must enter a password to proceed.")
        }
        rootProject.setProperty('keystorePass', pass)

    }
}